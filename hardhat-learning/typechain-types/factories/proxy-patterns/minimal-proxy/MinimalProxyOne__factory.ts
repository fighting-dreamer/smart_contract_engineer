/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MinimalProxyOne,
  MinimalProxyOneInterface,
} from "../../../proxy-patterns/minimal-proxy/MinimalProxyOne";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
] as const;

const _bytecode =
  "0x60a0604052348015600f57600080fd5b506040516101a43803806101a4833981016040819052602c91603c565b6001600160a01b0316608052606a565b600060208284031215604d57600080fd5b81516001600160a01b0381168114606357600080fd5b9392505050565b6080516101206100846000396000600e01526101206000f3fe608060405260003660606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051604492919060da565b600060405180830381855af49150503d8060008114607d576040519150601f19603f3d011682016040523d82523d6000602084013e6082565b606091505b50915091508160cd5760405162461bcd60e51b815260206004820152601360248201527211195b1959d85d1950d85b1b0811985a5b1959606a1b604482015260640160405180910390fd5b8051945060200192505050f35b818382376000910190815291905056fea2646970667358221220dc64b97c9dc68e59527e3adfda5eac48ca7ef2a4ceccc047aac01a31bbfaf12f64736f6c634300081a0033";

type MinimalProxyOneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinimalProxyOneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinimalProxyOne__factory extends ContractFactory {
  constructor(...args: MinimalProxyOneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _implementation: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_implementation, overrides || {});
  }
  override deploy(
    _implementation: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_implementation, overrides || {}) as Promise<
      MinimalProxyOne & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MinimalProxyOne__factory {
    return super.connect(runner) as MinimalProxyOne__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinimalProxyOneInterface {
    return new Interface(_abi) as MinimalProxyOneInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MinimalProxyOne {
    return new Contract(address, _abi, runner) as unknown as MinimalProxyOne;
  }
}
