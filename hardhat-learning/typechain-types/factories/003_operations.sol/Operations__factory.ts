/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  Operations,
  OperationsInterface,
} from "../../003_operations.sol/Operations";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "addToArray",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_key",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "addToMapping",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_num",
        type: "uint256",
      },
    ],
    name: "checkArrayOperations",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "checkConditionals",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_num",
        type: "uint8",
      },
    ],
    name: "checkLoops",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_key",
        type: "uint256",
      },
    ],
    name: "getMappingValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyArray",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "myAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "myArray",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "myMapping",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "myNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "print",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_key",
        type: "uint256",
      },
    ],
    name: "removeKV",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052607b600055600180546001600160a01b03191633179055348015602657600080fd5b506002805460018181018355600a7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace92830155825480820190935560149290910191909155600052600360205260647fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c55611239806100a66000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806392dda6491161008c578063bba50db211610066578063bba50db2146101d6578063be38d94e146101f6578063cc3e57d914610209578063d15ec8511461021c57600080fd5b806392dda6491461016f578063a29f697714610197578063b3c8bc06146101b757600080fd5b806313bdfacd146100d457806323fd0e40146100de57806326b85ee1146100fa5780634e43600e146101255780637c6688441461013a57806390f187191461015a575b600080fd5b6100dc61025f565b005b6100e760005481565b6040519081526020015b60405180910390f35b60015461010d906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b61012d610368565b6040516100f19190610df5565b6100e7610148366004610e38565b60036020526000908152604090205481565b6101626103c0565b6040516100f19190610e97565b61018261017d366004610eb1565b610403565b604080519283529015156020830152016100f1565b6100dc6101a5366004610ed4565b60009182526003602052604090912055565b6100dc6101c5366004610e38565b600090815260036020526040812055565b6100e76101e4366004610e38565b60009081526003602052604090205490565b6100dc610204366004610e38565b61042c565b6100e7610217366004610e38565b6108ae565b6100dc61022a366004610e38565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0155565b61029d6040518060400160405280601d81526020017f2d2d2d204c6f6767696e672066726f6d20536f6c6964697479202d2d2d0000008152506108cf565b6102ca6040518060400160405280600981526020016836bca73ab6b132b91d60b91b815250600054610915565b60408051808201909152600a81526936bca0b2323932b9b99d60b11b602082015260015461030191906001600160a01b031661095e565b6103096109a3565b60408051808201909152600d81526c36bca6b0b83834b733ad98ae9d60991b6020808301919091526001600052600390527fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c546103669190610915565b565b606060028054806020026020016040519081016040528092919081815260200182805480156103b657602002820191906000526020600020905b8154815260200190600101908083116103a2575b5050505050905090565b60606103ca6109fa565b60006103d4610a64565b90506103fe6040518060400160405280600681526020016503932b9901d160d51b81525082610aab565b919050565b600080600061041184610af0565b9050600061041e85610b21565b919591861494509092505050565b61046a6040518060400160405280601f81526020017f2d2d2d2d2d2d2d2d2d2d707573682d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d008152506108cf565b60005b8181101561049c5760026104818282610f0c565b8154600181810184556000938452602090932001550161046d565b506104a56109a3565b6104c6604051806060016040528060228152602001611142602291396108cf565b60028054806104d7576104d7610f29565b600190038181906000526020600020016000905590556104f56109a3565b6000600290506105656040518060400160405280601d81526020017f2d2d2d2d2d2d2d2d2d2d72656d6f76616c20617420696e646578203a20000000815250826040518060400160405280601281526020017101696969696969696969696969696969696960751b815250610b4f565b61056f6002610b9b565b6105776109a3565b6105986040518060600160405280603e81526020016110cb603e91396108cf565b60606105a381610ba6565b6105dc604051806040016040528060168152602001754c656e677468206f6620636f7069656420617272617960501b8152508251610915565b6105e581610bfb565b6105ee81610bfb565b61060f604051806060016040528060398152602001611109603991396108cf565b6106176109a3565b6000610621610368565b905061065c604051806040016040528060168152602001754c656e677468206f6620636f7069656420617272617960501b8152508251610915565b61066581610bfb565b600280548061067657610676610f29565b600190038181906000526020600020016000905590556106ad6040518060600160405280602e81526020016111d6602e91396108cf565b6106e6604051806040016040528060168152602001754c656e677468206f6620636f7069656420617272617960501b8152508251610915565b610707604051806080016040528060508152602001611186605091396108cf565b61071081610bfb565b610731604051806060016040528060278152602001611069602791396108cf565b6107396109a3565b6040805180820190915260168152754c656e677468206f6620636f7069656420617272617960501b602082015260028054909161077591610915565b6107cd818054806020026020016040519081016040528092919081815260200182805480156107c357602002820191906000526020600020905b8154815260200190600101908083116107af575b5050505050610bfb565b60028054806107de576107de610f29565b60019003818190600052602060002001600090559055610830604051806040016040528060168152602001754c656e677468206f6620636f7069656420617272617960501b8152508280549050610915565b610886818054806020026020016040519081016040528092919081815260200182805480156107c357602002820191906000526020600020908154815260200190600101908083116107af575050505050610bfb565b6108a76040518060600160405280603b8152602001611090603b91396108cf565b5050505050565b600281815481106108be57600080fd5b600091825260209091200154905081565b610912816040516024016108e39190610e97565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610c95565b50565b61095a828260405160240161092b929190610f3f565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052610c95565b5050565b61095a8282604051602401610974929190610f61565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610c95565b61036660028054806020026020016040519081016040528092919081815260200182805480156107c357602002820191906000526020600020908154815260200190600101908083116107af575050505050610bfb565b600a6000541115610a43576103666040518060400160405280601b81526020017f6d794e756d6265722069732067726561746572207468616e20313000000000008152506108cf565b610366604051806060016040528060228152602001611164602291396108cf565b6060606460005411610a8d57506040805180820190915260028152614e6f60f01b602082015290565b5060408051808201909152600381526259657360e81b602082015290565b61095a8282604051602401610ac1929190610f8b565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052610c95565b600080805b8360ff168160ff161015610b1a57610b1060ff821683610fb9565b9150600101610af5565b5092915050565b600080805b8360ff16811015610b1a57610b3b8183610fb9565b915080610b4781610fcc565b915050610b26565b610b96838383604051602401610b6793929190610fe5565b60408051601f198184030181529190526020810180516001600160e01b0316635970e08960e01b179052610c95565b505050565b610912600282610c9e565b6002805480602002602001604051908101604052809291908181526020018280548015610bf257602002820191906000526020600020905b815481526020019060010190808311610bde575b50505050505050565b610c396040518060400160405280601e81526020017f2d2d2d204c6f6767696e6720417272617920436f6e74656e7473202d2d2d00008152506108cf565b60005b815181101561095a57610c8d6040518060400160405280600c81526020016b36bca0b93930bcad92b22e9d60a11b81525082848481518110610c8057610c8061101a565b6020026020010151610d8d565b600101610c3c565b61091281610dd4565b81548110610cfe5760405162461bcd60e51b8152602060048201526024808201527f696e64657820676976656e206973206f7574206f6620626f756e64206f6620616044820152637272617960e01b606482015260840160405180910390fd5b805b8254610d0e90600190611030565b811015610d625782610d21826001610fb9565b81548110610d3157610d3161101a565b9060005260206000200154838281548110610d4e57610d4e61101a565b600091825260209091200155600101610d00565b5081805480610d7357610d73610f29565b600190038181906000526020600020016000905590555050565b610b96838383604051602401610da593929190611043565b60408051601f198184030181529190526020810180516001600160e01b031663ca47c4eb60e01b179052610c95565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b602080825282518282018190526000918401906040840190835b81811015610e2d578351835260209384019390920191600101610e0f565b509095945050505050565b600060208284031215610e4a57600080fd5b5035919050565b6000815180845260005b81811015610e7757602081850181015186830182015201610e5b565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610eaa6020830184610e51565b9392505050565b600060208284031215610ec357600080fd5b813560ff81168114610eaa57600080fd5b60008060408385031215610ee757600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610f2357610f23610ef6565b92915050565b634e487b7160e01b600052603160045260246000fd5b604081526000610f526040830185610e51565b90508260208301529392505050565b604081526000610f746040830185610e51565b905060018060a01b03831660208301529392505050565b604081526000610f9e6040830185610e51565b8281036020840152610fb08185610e51565b95945050505050565b80820180821115610f2357610f23610ef6565b600060018201610fde57610fde610ef6565b5060010190565b606081526000610ff86060830186610e51565b84602084015282810360408401526110108185610e51565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b81810381811115610f2357610f23610ef6565b6060815260006110566060830186610e51565b6020830194909452506040015291905056fe2d2d2d2d2d2d2d2d2d636f70792062792073746f72616765202d2d2d2d2d2d2d2d2d2d2d2d2d2d656666656374206f66206f726967696e616c206172726179206368616e67652068617070656e73206f6e2074686520636f706965642061727261792d2d2d2d2d2d2d2d2d2d2d2d636f70794172726179206279205265662d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d203a20446f6573204e4f5420574f524b2d2d2d2d2d2d2d2d2d2d2d2d20636f707941727261792062792076616c7565204d656d6f7279202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d72656d6f76616c2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d6d79206e756d626572206973206c657373207468616e206f7220657175616c203130426f7468206c656e677468206172652073616d65203d3e2074686520636f6965642061727261792069732061206e657720736570657261746520617272617920636f7079206f66206f726967696e616c416674657220736f6d6520656c656d656e742072656d6f76616c2066726f6d206f726967696e616c206172726179a2646970667358221220b2b64bc56d691b60617312daba385c727046f1f49cb49c445397135b68d2dcf664736f6c634300081a0033";

type OperationsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OperationsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Operations__factory extends ContractFactory {
  constructor(...args: OperationsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Operations & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Operations__factory {
    return super.connect(runner) as Operations__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OperationsInterface {
    return new Interface(_abi) as OperationsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Operations {
    return new Contract(address, _abi, runner) as unknown as Operations;
  }
}
