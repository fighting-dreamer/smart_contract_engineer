/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HelloWorldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "greet"
      | "transferAndUpdateGreet"
      | "updateGreet"
      | "updateGreetWithRequire"
      | "updateGreetWithRevert"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Transfer" | "UpdatedGreetingMessage"
  ): EventFragment;

  encodeFunctionData(functionFragment: "greet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAndUpdateGreet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateGreet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateGreetWithRequire",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGreetWithRevert",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "greet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAndUpdateGreet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGreet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGreetWithRequire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGreetWithRevert",
    data: BytesLike
  ): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedGreetingMessageEvent {
  export type InputTuple = [sender: AddressLike, message: string];
  export type OutputTuple = [sender: string, message: string];
  export interface OutputObject {
    sender: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HelloWorld extends BaseContract {
  connect(runner?: ContractRunner | null): HelloWorld;
  waitForDeployment(): Promise<this>;

  interface: HelloWorldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  greet: TypedContractMethod<[], [string], "view">;

  transferAndUpdateGreet: TypedContractMethod<
    [_greet: string],
    [void],
    "payable"
  >;

  updateGreet: TypedContractMethod<[_greet: string], [void], "nonpayable">;

  updateGreetWithRequire: TypedContractMethod<
    [_greet: string],
    [void],
    "nonpayable"
  >;

  updateGreetWithRevert: TypedContractMethod<
    [_greet: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "greet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferAndUpdateGreet"
  ): TypedContractMethod<[_greet: string], [void], "payable">;
  getFunction(
    nameOrSignature: "updateGreet"
  ): TypedContractMethod<[_greet: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGreetWithRequire"
  ): TypedContractMethod<[_greet: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGreetWithRevert"
  ): TypedContractMethod<[_greet: string], [void], "nonpayable">;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedGreetingMessage"
  ): TypedContractEvent<
    UpdatedGreetingMessageEvent.InputTuple,
    UpdatedGreetingMessageEvent.OutputTuple,
    UpdatedGreetingMessageEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdatedGreetingMessage(address,string)": TypedContractEvent<
      UpdatedGreetingMessageEvent.InputTuple,
      UpdatedGreetingMessageEvent.OutputTuple,
      UpdatedGreetingMessageEvent.OutputObject
    >;
    UpdatedGreetingMessage: TypedContractEvent<
      UpdatedGreetingMessageEvent.InputTuple,
      UpdatedGreetingMessageEvent.OutputTuple,
      UpdatedGreetingMessageEvent.OutputObject
    >;
  };
}
