/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OperationsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToArray"
      | "addToMapping"
      | "checkArrayOperations"
      | "checkConditionals"
      | "checkLoops"
      | "getMappingValue"
      | "getMyArray"
      | "myAddress"
      | "myArray"
      | "myMapping"
      | "myNumber"
      | "print"
      | "removeKV"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToMapping",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkArrayOperations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkConditionals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkLoops",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMappingValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyArray",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "myAddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "myArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "myMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "myNumber", values?: undefined): string;
  encodeFunctionData(functionFragment: "print", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeKV",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addToArray", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkArrayOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkConditionals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkLoops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMappingValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myMapping", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "print", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeKV", data: BytesLike): Result;
}

export interface Operations extends BaseContract {
  connect(runner?: ContractRunner | null): Operations;
  waitForDeployment(): Promise<this>;

  interface: OperationsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToArray: TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;

  addToMapping: TypedContractMethod<
    [_key: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkArrayOperations: TypedContractMethod<
    [_num: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkConditionals: TypedContractMethod<[], [string], "view">;

  checkLoops: TypedContractMethod<
    [_num: BigNumberish],
    [[bigint, boolean]],
    "view"
  >;

  getMappingValue: TypedContractMethod<[_key: BigNumberish], [bigint], "view">;

  getMyArray: TypedContractMethod<[], [bigint[]], "view">;

  myAddress: TypedContractMethod<[], [string], "view">;

  myArray: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  myMapping: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  myNumber: TypedContractMethod<[], [bigint], "view">;

  print: TypedContractMethod<[], [void], "view">;

  removeKV: TypedContractMethod<[_key: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToArray"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToMapping"
  ): TypedContractMethod<
    [_key: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkArrayOperations"
  ): TypedContractMethod<[_num: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkConditionals"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkLoops"
  ): TypedContractMethod<[_num: BigNumberish], [[bigint, boolean]], "view">;
  getFunction(
    nameOrSignature: "getMappingValue"
  ): TypedContractMethod<[_key: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMyArray"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "myAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "myArray"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "myMapping"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "myNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "print"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "removeKV"
  ): TypedContractMethod<[_key: BigNumberish], [void], "nonpayable">;

  filters: {};
}
