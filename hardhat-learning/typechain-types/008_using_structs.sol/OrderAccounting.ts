/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace OrderAccounting {
  export type ItemStruct = {
    itemId: BigNumberish;
    itemName: string;
    price: BigNumberish;
  };

  export type ItemStructOutput = [
    itemId: bigint,
    itemName: string,
    price: bigint
  ] & { itemId: bigint; itemName: string; price: bigint };

  export type FoodOrderStruct = {
    orderNum: BigNumberish;
    itemList: OrderAccounting.ItemStruct[];
    userId: BigNumberish;
    resturantId: BigNumberish;
  };

  export type FoodOrderStructOutput = [
    orderNum: bigint,
    itemList: OrderAccounting.ItemStructOutput[],
    userId: bigint,
    resturantId: bigint
  ] & {
    orderNum: bigint;
    itemList: OrderAccounting.ItemStructOutput[];
    userId: bigint;
    resturantId: bigint;
  };
}

export interface OrderAccountingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addNewOrder"
      | "getUserOrderInfo"
      | "orderStatusMap"
      | "userFoodOrderMap"
      | "userLastOrderNumMap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNewOrder",
    values: [BigNumberish, OrderAccounting.FoodOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrderInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderStatusMap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userFoodOrderMap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userLastOrderNumMap",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderStatusMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userFoodOrderMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastOrderNumMap",
    data: BytesLike
  ): Result;
}

export interface OrderAccounting extends BaseContract {
  connect(runner?: ContractRunner | null): OrderAccounting;
  waitForDeployment(): Promise<this>;

  interface: OrderAccountingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addNewOrder: TypedContractMethod<
    [_userId: BigNumberish, _foodOrder: OrderAccounting.FoodOrderStruct],
    [OrderAccounting.FoodOrderStructOutput],
    "payable"
  >;

  getUserOrderInfo: TypedContractMethod<
    [_userId: BigNumberish, _orderNum: BigNumberish],
    [OrderAccounting.FoodOrderStructOutput],
    "view"
  >;

  orderStatusMap: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userFoodOrderMap: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        orderNum: bigint;
        userId: bigint;
        resturantId: bigint;
      }
    ],
    "view"
  >;

  userLastOrderNumMap: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addNewOrder"
  ): TypedContractMethod<
    [_userId: BigNumberish, _foodOrder: OrderAccounting.FoodOrderStruct],
    [OrderAccounting.FoodOrderStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getUserOrderInfo"
  ): TypedContractMethod<
    [_userId: BigNumberish, _orderNum: BigNumberish],
    [OrderAccounting.FoodOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderStatusMap"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userFoodOrderMap"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        orderNum: bigint;
        userId: bigint;
        resturantId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userLastOrderNumMap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  filters: {};
}
