/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TestLearningEnumsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOrderStateInTransitionMapping"
      | "debugGetOrderStates"
      | "getStateTransitionMap"
      | "removeOrderStateTransitionMapping"
      | "stateTransitionMap"
      | "testAreSameNextStates"
      | "testComputeArrayHash"
      | "testContainsOrderState"
      | "testRemoveOrderState"
      | "updateStateTransitionMapping"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OrderStateChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "addOrderStateInTransitionMapping",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debugGetOrderStates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateTransitionMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOrderStateTransitionMapping",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateTransitionMap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testAreSameNextStates",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testComputeArrayHash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testContainsOrderState",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveOrderState",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateTransitionMapping",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOrderStateInTransitionMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debugGetOrderStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateTransitionMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOrderStateTransitionMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateTransitionMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAreSameNextStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testComputeArrayHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testContainsOrderState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveOrderState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateTransitionMapping",
    data: BytesLike
  ): Result;
}

export namespace OrderStateChangedEvent {
  export type InputTuple = [
    user: AddressLike,
    orderId: BigNumberish,
    newState: BigNumberish
  ];
  export type OutputTuple = [user: string, orderId: bigint, newState: bigint];
  export interface OutputObject {
    user: string;
    orderId: bigint;
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestLearningEnums extends BaseContract {
  connect(runner?: ContractRunner | null): TestLearningEnums;
  waitForDeployment(): Promise<this>;

  interface: TestLearningEnumsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOrderStateInTransitionMapping: TypedContractMethod<
    [currState: BigNumberish, nextState: BigNumberish],
    [void],
    "nonpayable"
  >;

  debugGetOrderStates: TypedContractMethod<[], [bigint[]], "view">;

  getStateTransitionMap: TypedContractMethod<
    [state: BigNumberish],
    [bigint[]],
    "view"
  >;

  removeOrderStateTransitionMapping: TypedContractMethod<
    [currState: BigNumberish, removableState: BigNumberish],
    [void],
    "nonpayable"
  >;

  stateTransitionMap: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  testAreSameNextStates: TypedContractMethod<
    [currNextStates: BigNumberish[], nextStates: BigNumberish[]],
    [boolean],
    "view"
  >;

  testComputeArrayHash: TypedContractMethod<
    [arr: BigNumberish[]],
    [string],
    "view"
  >;

  testContainsOrderState: TypedContractMethod<
    [arr: BigNumberish[], state: BigNumberish],
    [[bigint, boolean]],
    "view"
  >;

  testRemoveOrderState: TypedContractMethod<
    [_inputOrderStates: BigNumberish[], _index: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;

  updateStateTransitionMapping: TypedContractMethod<
    [currState: BigNumberish, nextStates: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOrderStateInTransitionMapping"
  ): TypedContractMethod<
    [currState: BigNumberish, nextState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debugGetOrderStates"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getStateTransitionMap"
  ): TypedContractMethod<[state: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "removeOrderStateTransitionMapping"
  ): TypedContractMethod<
    [currState: BigNumberish, removableState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stateTransitionMap"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "testAreSameNextStates"
  ): TypedContractMethod<
    [currNextStates: BigNumberish[], nextStates: BigNumberish[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "testComputeArrayHash"
  ): TypedContractMethod<[arr: BigNumberish[]], [string], "view">;
  getFunction(
    nameOrSignature: "testContainsOrderState"
  ): TypedContractMethod<
    [arr: BigNumberish[], state: BigNumberish],
    [[bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "testRemoveOrderState"
  ): TypedContractMethod<
    [_inputOrderStates: BigNumberish[], _index: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStateTransitionMapping"
  ): TypedContractMethod<
    [currState: BigNumberish, nextStates: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OrderStateChanged"
  ): TypedContractEvent<
    OrderStateChangedEvent.InputTuple,
    OrderStateChangedEvent.OutputTuple,
    OrderStateChangedEvent.OutputObject
  >;

  filters: {
    "OrderStateChanged(address,uint256,uint8)": TypedContractEvent<
      OrderStateChangedEvent.InputTuple,
      OrderStateChangedEvent.OutputTuple,
      OrderStateChangedEvent.OutputObject
    >;
    OrderStateChanged: TypedContractEvent<
      OrderStateChangedEvent.InputTuple,
      OrderStateChangedEvent.OutputTuple,
      OrderStateChangedEvent.OutputObject
    >;
  };
}
